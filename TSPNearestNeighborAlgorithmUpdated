% Nearest Neighbor algorithm for the Travelling Salesman Problem

% cities - two column matrix of type double - contains cities' coordinates
% shortestPath - column vector - optimal soultion city list (ends with the
%                starting city)
% shortestPathLength - scalar - optimal path length
% Oliver 30 TSP
 xy = [
     54	67
     54	62
     37	84
     41	94
      2 99
      7 64
     25	62
     22	60
     18	54
      4 50
     13	40
     18	40
     24	42
     25	38
     44	35
     41	26
     45	21
     58	35
     62	32
     82	7
     91	38
     83	46
     71	44
     64	60
     68	58
     83	69
     87	76
     74	78
     71	71
     58	69];
    
    function [shortestPathLength,shortestPath] = nn_tsp(cities)
cities = 100*rand(10,2);
N_cities = size(cities,1);

function d = distance(cities)
  % DISTANCE
% d = DISTANCE(inputcities) calculates the distance between n cities as
% required in a Traveling Salesman Problem. The input argument has two rows
% and n columns, where n is the number of cities and each column represent
% the coordinate of the corresponding city. 
  d=0;
  for n=1:length(cities)
    if n==length(cities)
      d= d+ norm(cities(:,n) - cities(:,1));
    else
      d= d + norm(cities(:,n) - cities(:,n+1));
    end
  end  
      
distances = d(cities);
distances = squareform(distances);
distances(distances==0) = realmax;
shortestPathLength = realmax;
for i = 1:N_cities
    
    startCity = i;
    path = startCity;
    
    distanceTraveled = 0;
    distancesNew = distances;
    
    currentCity = startCity; 
    
    for j = 1:N_cities-1
        
        [minDist,nextCity] = min(distancesNew(:,currentCity));
        if (length(nextCity) > 1)
            nextCity = nextCity(1);
        end
        
        path(end+1,1) = nextCity;
        distanceTraveled = distanceTraveled +...
                    distances(currentCity,nextCity);
        
        distancesNew(currentCity,:) = realmax;
        
        currentCity = nextCity;
        
    end
    
    path(end+1,1) = startCity;
    distanceTraveled = distanceTraveled +...
        distances(currentCity,startCity);
    
    if (distanceTraveled < shortestPathLength)
        shortestPathLength = distanceTraveled;
        shortestPath = path; 
    end 
    
    
    
end

figure
x_min = min(cities(:,1)) - 3;
x_max = max(cities(:,1)) + 3;
y_min = min(cities(:,2)) - 3;
y_max = max(cities(:,2)) + 3;
plot(cities(:,1),cities(:,2),'bo');
axis([x_min x_max y_min y_max]);
axis equal;
grid on;
hold on;
% plot the shortest path
xd=[];yd=[];
for i = 1:(N_cities+1)
    xd(i)=cities(shortestPath(i),1);
    yd(i)=cities(shortestPath(i),2);
end
line(xd,yd);
title(['Path length = ',num2str(shortestPathLength)]);
hold off;
